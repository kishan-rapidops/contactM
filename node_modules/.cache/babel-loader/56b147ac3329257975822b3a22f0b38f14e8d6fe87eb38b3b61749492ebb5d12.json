{"ast":null,"code":"var _jsxFileName = \"/home/ad.rapidops.com/kishan.singh/Desktop/ContactM/src/context/notes/NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport NoteContext from './NoteContext';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // Add note\n  const addNotes = async (name, email, mobile, mother, father, address) => {\n    try {\n      const note = await fetch(`${host}/api/contacts/addcontact`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          mobile,\n          mother,\n          father,\n          address\n        })\n      });\n      const result = await note.json();\n      if (result.status == 200) {\n        setNotes(notes.concat(result));\n        toast.success('Contact added successfully!');\n      } else {\n        toast.error(`Error: ${result.message || 'Failed to add contact'}`);\n      }\n    } catch (error) {\n      toast.error(`Error: ${error.message}`);\n    }\n  };\n\n  // Edit note\n  const editNote = async (id, name, email, mobile, mother, father, address) => {\n    try {\n      const response = await fetch(`${host}/api/contacts/updatecontact/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          mobile,\n          mother,\n          father,\n          address\n        })\n      });\n      const json = await response.json();\n      if (response.status == 200) {\n        const updatedNotes = notes.map(note => note._id === id ? {\n          ...note,\n          name,\n          email,\n          mobile,\n          mother,\n          father,\n          address\n        } : note);\n        setNotes(updatedNotes);\n        toast.success('Contact updated successfully!');\n      } else {\n        toast.error(`Error: ${json.message || 'Failed to update contact'}`);\n      }\n    } catch (error) {\n      toast.error(`Error: ${error.message}`);\n    }\n  };\n\n  // Delete note\n  const deleteNote = async id => {\n    try {\n      const response = await fetch(`${host}/api/contacts/delete/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token')\n        }\n      });\n      const json = await response.json();\n      if (response.status == 200) {\n        setNotes(notes.filter(note => note._id !== id));\n        toast.success('Contact deleted successfully!');\n      } else {\n        toast.error(`Error: ${json.message || 'Failed to delete contact'}`);\n      }\n    } catch (error) {\n      toast.error(`Error: ${error.message}`);\n    }\n  };\n\n  // Fetch all notes\n  const fetchNotes = async () => {\n    try {\n      const response = await fetch(`${host}/api/contacts/fetchallcontact`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token')\n        }\n      });\n      const json = await response.json();\n      if (response.status == 200) {\n        setNotes(json);\n      } else {\n        toast.error(`Error: ${json.message || 'Failed to fetch contacts'}`);\n      }\n    } catch (error) {\n      toast.error(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNotes,\n      deleteNote,\n      editNote,\n      fetchNotes\n    },\n    children: [props.children, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","ToastContainer","toast","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","addNotes","name","email","mobile","mother","father","address","note","fetch","method","headers","localStorage","getItem","body","JSON","stringify","result","json","status","concat","success","error","message","editNote","id","response","updatedNotes","map","_id","deleteNote","filter","fetchNotes","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ad.rapidops.com/kishan.singh/Desktop/ContactM/src/context/notes/NoteState.js"],"sourcesContent":["import { useState } from 'react';\nimport NoteContext from './NoteContext';\nimport { ToastContainer, toast } from 'react-toastify';\n\nconst NoteState = (props) => {\n    const host = \"http://localhost:5000\";\n    const notesInitial = [];\n\n    const [notes, setNotes] = useState(notesInitial);\n\n    // Add note\n    const addNotes = async (name, email, mobile, mother, father, address) => {\n        try {\n            const note = await fetch(`${host}/api/contacts/addcontact`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"auth-token\": localStorage.getItem('token')\n                },\n                body: JSON.stringify({ name, email, mobile, mother, father, address }),\n            });\n\n            const result = await note.json();\n\n            if (result.status == 200) {\n                setNotes(notes.concat(result));\n                toast.success('Contact added successfully!');\n            } else {\n                toast.error(`Error: ${result.message || 'Failed to add contact'}`);\n            }\n        } catch (error) {\n            toast.error(`Error: ${error.message}`);\n        }\n    };\n\n    // Edit note\n    const editNote = async (id, name, email, mobile, mother, father, address) => {\n        try {\n            const response = await fetch(`${host}/api/contacts/updatecontact/${id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"auth-token\": localStorage.getItem('token')\n                },\n                body: JSON.stringify({ name, email, mobile, mother, father, address }),\n            });\n\n            const json = await response.json();\n\n            if (response.status == 200) {\n                const updatedNotes = notes.map((note) =>\n                    note._id === id ? { ...note, name, email, mobile, mother, father, address } : note\n                );\n                setNotes(updatedNotes);\n                toast.success('Contact updated successfully!');\n            } else {\n                toast.error(`Error: ${json.message || 'Failed to update contact'}`);\n            }\n        } catch (error) {\n            toast.error(`Error: ${error.message}`);\n        }\n    };\n\n    // Delete note\n    const deleteNote = async (id) => {\n        try {\n            const response = await fetch(`${host}/api/contacts/delete/${id}`, {\n                method: \"DELETE\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"auth-token\": localStorage.getItem('token')\n                },\n            });\n\n            const json = await response.json();\n\n            if (response.status == 200) {\n                setNotes(notes.filter((note) => note._id !== id));\n                toast.success('Contact deleted successfully!');\n            } else {\n                toast.error(`Error: ${json.message || 'Failed to delete contact'}`);\n            }\n        } catch (error) {\n            toast.error(`Error: ${error.message}`);\n        }\n    };\n\n    // Fetch all notes\n    const fetchNotes = async () => {\n        try {\n            const response = await fetch(`${host}/api/contacts/fetchallcontact`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"auth-token\": localStorage.getItem('token')\n                },\n            });\n\n            const json = await response.json();\n\n            if (response.status==200) {\n                setNotes(json);\n            } else {\n                toast.error(`Error: ${json.message || 'Failed to fetch contacts'}`);\n            }\n        } catch (error) {\n            toast.error(`Error: ${error.message}`);\n        }\n    };\n\n    return (\n        <NoteContext.Provider value={{ notes, addNotes, deleteNote, editNote, fetchNotes }}>\n            {props.children}\n            {/* Toast Container for displaying toasts */}\n            <ToastContainer />\n        </NoteContext.Provider>\n    );\n};\n\nexport default NoteState;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,YAAY,GAAG,EAAE;EAEvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACU,YAAY,CAAC;;EAEhD;EACA,MAAMG,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,KAAK;IACrE,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAGZ,IAAI,0BAA0B,EAAE;QACxDa,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;QAC9C,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEd,IAAI;UAAEC,KAAK;UAAEC,MAAM;UAAEC,MAAM;UAAEC,MAAM;UAAEC;QAAQ,CAAC;MACzE,CAAC,CAAC;MAEF,MAAMU,MAAM,GAAG,MAAMT,IAAI,CAACU,IAAI,CAAC,CAAC;MAEhC,IAAID,MAAM,CAACE,MAAM,IAAI,GAAG,EAAE;QACtBnB,QAAQ,CAACD,KAAK,CAACqB,MAAM,CAACH,MAAM,CAAC,CAAC;QAC9B1B,KAAK,CAAC8B,OAAO,CAAC,6BAA6B,CAAC;MAChD,CAAC,MAAM;QACH9B,KAAK,CAAC+B,KAAK,CAAC,UAAUL,MAAM,CAACM,OAAO,IAAI,uBAAuB,EAAE,CAAC;MACtE;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZ/B,KAAK,CAAC+B,KAAK,CAAC,UAAUA,KAAK,CAACC,OAAO,EAAE,CAAC;IAC1C;EACJ,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,EAAE,EAAEvB,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,KAAK;IACzE,IAAI;MACA,MAAMmB,QAAQ,GAAG,MAAMjB,KAAK,CAAC,GAAGZ,IAAI,+BAA+B4B,EAAE,EAAE,EAAE;QACrEf,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;QAC9C,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEd,IAAI;UAAEC,KAAK;UAAEC,MAAM;UAAEC,MAAM;UAAEC,MAAM;UAAEC;QAAQ,CAAC;MACzE,CAAC,CAAC;MAEF,MAAMW,IAAI,GAAG,MAAMQ,QAAQ,CAACR,IAAI,CAAC,CAAC;MAElC,IAAIQ,QAAQ,CAACP,MAAM,IAAI,GAAG,EAAE;QACxB,MAAMQ,YAAY,GAAG5B,KAAK,CAAC6B,GAAG,CAAEpB,IAAI,IAChCA,IAAI,CAACqB,GAAG,KAAKJ,EAAE,GAAG;UAAE,GAAGjB,IAAI;UAAEN,IAAI;UAAEC,KAAK;UAAEC,MAAM;UAAEC,MAAM;UAAEC,MAAM;UAAEC;QAAQ,CAAC,GAAGC,IAClF,CAAC;QACDR,QAAQ,CAAC2B,YAAY,CAAC;QACtBpC,KAAK,CAAC8B,OAAO,CAAC,+BAA+B,CAAC;MAClD,CAAC,MAAM;QACH9B,KAAK,CAAC+B,KAAK,CAAC,UAAUJ,IAAI,CAACK,OAAO,IAAI,0BAA0B,EAAE,CAAC;MACvE;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZ/B,KAAK,CAAC+B,KAAK,CAAC,UAAUA,KAAK,CAACC,OAAO,EAAE,CAAC;IAC1C;EACJ,CAAC;;EAED;EACA,MAAMO,UAAU,GAAG,MAAOL,EAAE,IAAK;IAC7B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAAC,GAAGZ,IAAI,wBAAwB4B,EAAE,EAAE,EAAE;QAC9Df,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;QAC9C;MACJ,CAAC,CAAC;MAEF,MAAMK,IAAI,GAAG,MAAMQ,QAAQ,CAACR,IAAI,CAAC,CAAC;MAElC,IAAIQ,QAAQ,CAACP,MAAM,IAAI,GAAG,EAAE;QACxBnB,QAAQ,CAACD,KAAK,CAACgC,MAAM,CAAEvB,IAAI,IAAKA,IAAI,CAACqB,GAAG,KAAKJ,EAAE,CAAC,CAAC;QACjDlC,KAAK,CAAC8B,OAAO,CAAC,+BAA+B,CAAC;MAClD,CAAC,MAAM;QACH9B,KAAK,CAAC+B,KAAK,CAAC,UAAUJ,IAAI,CAACK,OAAO,IAAI,0BAA0B,EAAE,CAAC;MACvE;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZ/B,KAAK,CAAC+B,KAAK,CAAC,UAAUA,KAAK,CAACC,OAAO,EAAE,CAAC;IAC1C;EACJ,CAAC;;EAED;EACA,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAMN,QAAQ,GAAG,MAAMjB,KAAK,CAAC,GAAGZ,IAAI,+BAA+B,EAAE;QACjEa,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;QAC9C;MACJ,CAAC,CAAC;MAEF,MAAMK,IAAI,GAAG,MAAMQ,QAAQ,CAACR,IAAI,CAAC,CAAC;MAElC,IAAIQ,QAAQ,CAACP,MAAM,IAAE,GAAG,EAAE;QACtBnB,QAAQ,CAACkB,IAAI,CAAC;MAClB,CAAC,MAAM;QACH3B,KAAK,CAAC+B,KAAK,CAAC,UAAUJ,IAAI,CAACK,OAAO,IAAI,0BAA0B,EAAE,CAAC;MACvE;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZ/B,KAAK,CAAC+B,KAAK,CAAC,UAAUA,KAAK,CAACC,OAAO,EAAE,CAAC;IAC1C;EACJ,CAAC;EAED,oBACI9B,OAAA,CAACJ,WAAW,CAAC4C,QAAQ;IAACC,KAAK,EAAE;MAAEnC,KAAK;MAAEE,QAAQ;MAAE6B,UAAU;MAAEN,QAAQ;MAAEQ;IAAW,CAAE;IAAAG,QAAA,GAC9ExC,KAAK,CAACwC,QAAQ,eAEf1C,OAAA,CAACH,cAAc;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAE/B,CAAC;AAAC3C,EAAA,CAjHIF,SAAS;AAAA8C,EAAA,GAAT9C,SAAS;AAmHf,eAAeA,SAAS;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}